Summary:
	Test execution start time       : 2023-01-07 17:55:47 UTC
	Test execution end time         : 2023-01-07 17:55:53 UTC
	Test execution time             : 5s 713ms
	Test execution time (aggregated): 23s 412ms
	Number of features              : 12
	Number of scenarios             : 27
	Passed scenarios                : 14
	Bypassed scenarios              : 1
	Failed scenarios                : 8
	Ignored scenarios               : 4
	Number of steps                 : 140
	Passed steps                    : 110
	Bypassed steps                  : 3
	Failed steps                    : 14
	Ignored steps                   : 8
	Not Run steps                   : 5

Feature: Address book feature
	In order to maintain my product dispatch
	As an application user
	I want to add and browse my client postal addresses by client emails

	Scenario: Adding contacts - Failed (39ms)
		Step 1: GIVEN an empty address book - Passed (<1ms)
		Step 2: WHEN I associate contact "<tree>" with address "<tree>" as alias "Joey" - Passed (25ms)
		contact:
		  $: <object>
		  $.Email: joe67@email.com
		  $.Name: Joe Jonnes
		  $.PhoneNumber: 666777888
		address:
		  $: <object>
		  $.Address: 47 Main Street
		  $.City: London
		  $.Country: UK
		  $.PostCode: AB1 2CD
		Step 3: AND I associate contact "<tree>" with address "<tree>" as alias "Janek" - Passed (<1ms)
		contact:
		  $: <object>
		  $.Email: nowak33@email.com
		  $.Name: Jan Nowak
		  $.PhoneNumber: 123654789
		address:
		  $: <object>
		  $.Address: Rynek Główny 1
		  $.City: Kraków
		  $.Country: Poland
		  $.PostCode: 31-042
		Step 4: THEN address book should contain contacts "<tree>" - Failed (6ms)
		contacts:
		= $: <array:2>
		= $[0]: <object>
		= $[0].Email: nowak33@email.com
		= $[0].Name: Jan Nowak
		= $[0].PhoneNumber: 123654789
		= $[1]: <object>
		= $[1].Email: joe67@email.com
		! $[1].Name: Joel Jonnes/Joe Jonnes
		= $[1].PhoneNumber: 666777888
		Details:
			Step 4: System.InvalidOperationException : Parameter 'contacts' verification failed: $[1].Name: expected: equals 'Joel Jonnes', but got: 'Joe Jonnes'
				at LightBDD.Core.Execution.Implementation.RunnableStep.VerifyParameterResults() in d:\dev\LightBDD\src\LightBDD.Core\Execution\Implementation\RunnableStep.cs:line 174
				at LightBDD.Core.Execution.Implementation.RunnableStep.RunStepAsync() in d:\dev\LightBDD\src\LightBDD.Core\Execution\Implementation\RunnableStep.cs:line 146

	Scenario: Matching addresses by email - Passed (6ms)
		Step 1: GIVEN an empty address book - Passed (<1ms)
		Step 2: WHEN I associate contact "<tree>" with address "<tree>" as alias "Joey" - Passed (<1ms)
		contact:
		  $: <object>
		  $.Email: joe67@email.com
		  $.Name: Joe Jonnes
		  $.PhoneNumber: 666777888
		address:
		  $: <object>
		  $.Address: 47 Main Street
		  $.City: London
		  $.Country: UK
		  $.PostCode: AB1 2CD
		Step 3: AND I associate contact "<tree>" with address "<tree>" as alias "Janek" - Passed (<1ms)
		contact:
		  $: <object>
		  $.Email: nowak33@email.com
		  $.Name: Jan Nowak
		  $.PhoneNumber: 123654789
		address:
		  $: <object>
		  $.Address: Rynek Główny 1
		  $.City: Kraków
		  $.Country: Poland
		  $.PostCode: 31-042
		Step 4: THEN address by email should match "<tree>" - Passed (1ms)
		match:
		= $: <object>
		= $['joe67@email.com']: <object>
		= $['joe67@email.com'].Address: <object>
		= $['joe67@email.com'].Address.Address: 47 Main Street
		= $['joe67@email.com'].Address.City: London
		= $['joe67@email.com'].Address.PostCode: AB1 2CD
		= $['nowak33@email.com']: <object>
		= $['nowak33@email.com'].Address: <object>
		= $['nowak33@email.com'].Address.Address: Rynek Główny 1
		= $['nowak33@email.com'].Address.City: Kraków
		= $['nowak33@email.com'].Address.PostCode: 31-042

	Scenario: Persisting address book - Passed (29ms)
		Step 1: GIVEN an address book with contacts "<tree>" - Passed (<1ms)
		contacts:
		  $: <array:2>
		  $[0]: <object>
		  $[0].Address: <object>
		  $[0].Address.Address: 47 Main Street
		  $[0].Address.City: London
		  $[0].Address.Country: UK
		  $[0].Address.PostCode: AB1 2CD
		  $[0].Alias: Joey
		  $[0].Contact: <object>
		  $[0].Contact.Email: joe67@email.com
		  $[0].Contact.Name: Joe Jonnes
		  $[0].Contact.PhoneNumber: 666777888
		  $[1]: <object>
		  $[1].Address: <object>
		  $[1].Address.Address: Rynek Główny 1
		  $[1].Address.City: Kraków
		  $[1].Address.Country: Poland
		  $[1].Address.PostCode: 31-042
		  $[1].Alias: Janek
		  $[1].Contact: <object>
		  $[1].Contact.Email: nowak33@email.com
		  $[1].Contact.Name: Jan Nowak
		  $[1].Contact.PhoneNumber: 123654789
		Step 2: WHEN I persist book as json - Passed (15ms)
		Step 3: THEN address book should match persisted json "<tree>" - Passed (8ms)
		json:
		= $: <object>
		= $.ContactsByEmail: <object>
		= $.ContactsByEmail['joe67@email.com']: <object>
		= $.ContactsByEmail['joe67@email.com'].Address: <object>
		= $.ContactsByEmail['joe67@email.com'].Address.Address: 47 Main Street
		= $.ContactsByEmail['joe67@email.com'].Address.City: London
		= $.ContactsByEmail['joe67@email.com'].Address.Country: UK
		= $.ContactsByEmail['joe67@email.com'].Address.PostCode: AB1 2CD
		= $.ContactsByEmail['joe67@email.com'].Alias: Joey
		= $.ContactsByEmail['joe67@email.com'].Contact: <object>
		= $.ContactsByEmail['joe67@email.com'].Contact.Email: joe67@email.com
		= $.ContactsByEmail['joe67@email.com'].Contact.Name: Joe Jonnes
		= $.ContactsByEmail['joe67@email.com'].Contact.PhoneNumber: 666777888
		= $.ContactsByEmail['nowak33@email.com']: <object>
		= $.ContactsByEmail['nowak33@email.com'].Address: <object>
		= $.ContactsByEmail['nowak33@email.com'].Address.Address: Rynek Główny 1
		= $.ContactsByEmail['nowak33@email.com'].Address.City: Kraków
		= $.ContactsByEmail['nowak33@email.com'].Address.Country: Poland
		= $.ContactsByEmail['nowak33@email.com'].Address.PostCode: 31-042
		= $.ContactsByEmail['nowak33@email.com'].Alias: Janek
		= $.ContactsByEmail['nowak33@email.com'].Contact: <object>
		= $.ContactsByEmail['nowak33@email.com'].Contact.Email: nowak33@email.com
		= $.ContactsByEmail['nowak33@email.com'].Contact.Name: Jan Nowak
		= $.ContactsByEmail['nowak33@email.com'].Contact.PhoneNumber: 123654789
		Step 4: AND address book should match persisted json "<tree>" - Passed (1ms)
		json:
		= $: <object>
		= $.ContactsByEmail: <object>
		= $.ContactsByEmail['joe67@email.com']: <object>
		= $.ContactsByEmail['joe67@email.com'].Address: <object>
		= $.ContactsByEmail['joe67@email.com'].Address.Address: 47 Main Street
		= $.ContactsByEmail['joe67@email.com'].Address.City: London
		= $.ContactsByEmail['joe67@email.com'].Address.Country: UK
		= $.ContactsByEmail['joe67@email.com'].Address.PostCode: AB1 2CD
		= $.ContactsByEmail['joe67@email.com'].Alias: Joey
		= $.ContactsByEmail['joe67@email.com'].Contact: <object>
		= $.ContactsByEmail['joe67@email.com'].Contact.Email: joe67@email.com
		= $.ContactsByEmail['joe67@email.com'].Contact.Name: Joe Jonnes
		= $.ContactsByEmail['joe67@email.com'].Contact.PhoneNumber: 666777888
		= $.ContactsByEmail['nowak33@email.com']: <object>
		= $.ContactsByEmail['nowak33@email.com'].Address: <object>
		= $.ContactsByEmail['nowak33@email.com'].Address.Address: Rynek Główny 1
		= $.ContactsByEmail['nowak33@email.com'].Address.City: Kraków
		= $.ContactsByEmail['nowak33@email.com'].Address.Country: Poland
		= $.ContactsByEmail['nowak33@email.com'].Address.PostCode: 31-042
		= $.ContactsByEmail['nowak33@email.com'].Alias: Janek
		= $.ContactsByEmail['nowak33@email.com'].Contact: <object>
		= $.ContactsByEmail['nowak33@email.com'].Contact.Email: nowak33@email.com
		= $.ContactsByEmail['nowak33@email.com'].Contact.Name: Jan Nowak
		= $.ContactsByEmail['nowak33@email.com'].Contact.PhoneNumber: 123654789
		Comments:
			Step 3: Underlying type: JsonElement
			Step 4: Underlying type: ExpandoObject

	Scenario: Retrieving postal addresses - Passed (5ms)
		Step 1: GIVEN an empty address book - Passed (<1ms)
		Step 2: WHEN I associate contact "<tree>" with address "<tree>" as alias "Joey" - Passed (<1ms)
		contact:
		  $: <object>
		  $.Email: joe67@email.com
		  $.Name: Joe Jonnes
		  $.PhoneNumber: 666777888
		address:
		  $: <object>
		  $.Address: 47 Main Street
		  $.City: London
		  $.Country: UK
		  $.PostCode: AB1 2CD
		Step 3: AND I associate contact "<tree>" with address "<tree>" as alias "Janek" - Passed (<1ms)
		contact:
		  $: <object>
		  $.Email: nowak33@email.com
		  $.Name: Jan Nowak
		  $.PhoneNumber: 123654789
		address:
		  $: <object>
		  $.Address: Rynek Główny 1
		  $.City: Kraków
		  $.Country: Poland
		  $.PostCode: 31-042
		Step 4: THEN address book should contain postal addresses "<tree>" - Passed (1ms)
		addresses:
		= $: <array:2>
		= $[0]: <object>
		= $[0].Address: Rynek Główny 1
		= $[0].City: Kraków
		= $[0].Country: Poland
		= $[0].PostCode: 31-042
		= $[1]: <object>
		= $[1].Address: 47 Main Street
		= $[1].City: London
		= $[1].Country: UK
		= $[1].PostCode: AB1 2CD

Feature: Basket feature [Story-4]
	In order to buy products
	As a customer
	I want to add products to basket

	Scenario: No product in stock [Ticket-6] - Passed (1s 343ms)
		Categories: Sales
		Step 1: GIVEN product is out of stock - Passed (2ms)
		Step 2: WHEN customer adds it to the basket - Passed (1s 335ms)
		Step 3: THEN the product addition should be unsuccessful - Passed (<1ms)
		Step 4: AND the basket should not contain the product - Passed (<1ms)
		Comments:
			Step 2: Transferring 'product' to the basket

	Scenario: Successful addition [Ticket-7] - Ignored (1s 915ms)
		Categories: Sales
		Step 1: GIVEN product is in stock - Passed (<1ms)
		Step 2: WHEN customer adds it to the basket - Passed (1s 914ms)
		Step 3: THEN the product addition should be successful - Passed (<1ms)
		Step 4: AND the basket should contain the product - Passed (<1ms)
		Step 5: AND the product should be removed from stock - Ignored (<1ms)
		Details:
			Step 5: Product removal from stock is not implemented yet
		Comments:
			Step 1: Added 'product' to the stock
			Step 2: Transferring 'product' to the basket

Feature: Calculator feature [Story-8]
	In order to perform calculations correctly
	As a office assistant
	I want to use calculator for my calculations
	
	This example presents usage of MultiAssertAttribute.

	Scenario: Adding numbers [Ticket-13] - Failed (48ms)
		Step 1: GIVEN a calculator - Passed (2ms)
		Step 2: THEN adding "2" to "3" should give "5" - Passed (3ms)
		Step 3: AND adding "-3" to "2" should give "expected: equals '-1', but got: '1'" - Failed (20ms)
		Step 4: AND adding "0" to "1" should give "1" - Passed (<1ms)
		Step 5: AND adding "-2" to "-1" should give "expected: equals '-3', but got: '3'" - Failed (<1ms)
		Details:
			Step 3: System.InvalidOperationException : Parameter 'result' verification failed: expected: equals '-1', but got: '1'
				at LightBDD.Core.Execution.Implementation.RunnableStep.VerifyParameterResults() in d:\dev\LightBDD\src\LightBDD.Core\Execution\Implementation\RunnableStep.cs:line 174
				at LightBDD.Core.Execution.Implementation.RunnableStep.RunStepAsync() in d:\dev\LightBDD\src\LightBDD.Core\Execution\Implementation\RunnableStep.cs:line 146
			Step 5: System.InvalidOperationException : Parameter 'result' verification failed: expected: equals '-3', but got: '3'
				at LightBDD.Core.Execution.Implementation.RunnableStep.VerifyParameterResults() in d:\dev\LightBDD\src\LightBDD.Core\Execution\Implementation\RunnableStep.cs:line 174
				at LightBDD.Core.Execution.Implementation.RunnableStep.RunStepAsync() in d:\dev\LightBDD\src\LightBDD.Core\Execution\Implementation\RunnableStep.cs:line 146

	Scenario: Composite operations [Ticket-13] - Failed (12ms)
		Step 1: GIVEN a calculator - Passed (<1ms)
		Step 2: THEN it should add numbers - Failed (4ms)
			Step 2.1: THEN adding "2" to "3" should give "5" - Passed (<1ms)
			Step 2.2: AND adding "2" to "-3" should give "expected: equals '-1', but got: '1'" - Failed (<1ms)
			Step 2.3: AND adding "0" to "1" should give "expected: equals '0', but got: '1'" - Failed (<1ms)
		Step 3: AND it should multiply numbers - Ignored (3ms)
			Step 3.1: THEN multiplying "2" by "3" should give "6" - Passed (<1ms)
			Step 3.2: AND multiplying "2" by "-3" should give "expected: equals '-6'" - Ignored (<1ms)
			Step 3.3: AND multiplying "1" by "1" should give "<?>" - NotRun
		Step 4: AND it should divide numbers - Failed (2ms)
			Step 4.1: THEN dividing "6" by "3" should give "2" - Passed (<1ms)
			Step 4.2: AND multiplying "5" by "2" should give "expected: equals '2', but got: '10'" - Failed (<1ms)
		Details:
			Step 2.2: System.InvalidOperationException : Parameter 'result' verification failed: expected: equals '-1', but got: '1'
				at LightBDD.Core.Execution.Implementation.RunnableStep.VerifyParameterResults() in d:\dev\LightBDD\src\LightBDD.Core\Execution\Implementation\RunnableStep.cs:line 174
				at LightBDD.Core.Execution.Implementation.RunnableStep.RunStepAsync() in d:\dev\LightBDD\src\LightBDD.Core\Execution\Implementation\RunnableStep.cs:line 146
			Step 2.3: System.InvalidOperationException : Parameter 'result' verification failed: expected: equals '0', but got: '1'
				at LightBDD.Core.Execution.Implementation.RunnableStep.VerifyParameterResults() in d:\dev\LightBDD\src\LightBDD.Core\Execution\Implementation\RunnableStep.cs:line 174
				at LightBDD.Core.Execution.Implementation.RunnableStep.RunStepAsync() in d:\dev\LightBDD\src\LightBDD.Core\Execution\Implementation\RunnableStep.cs:line 146
			Step 3.2: Negative numbers are not supported yet
			Step 4.2: System.InvalidOperationException : Parameter 'result' verification failed: expected: equals '2', but got: '10'
				at LightBDD.Core.Execution.Implementation.RunnableStep.VerifyParameterResults() in d:\dev\LightBDD\src\LightBDD.Core\Execution\Implementation\RunnableStep.cs:line 174
				at LightBDD.Core.Execution.Implementation.RunnableStep.RunStepAsync() in d:\dev\LightBDD\src\LightBDD.Core\Execution\Implementation\RunnableStep.cs:line 146
		Comments:
			Step 2: It is possible to add MultiAssertAttribute on composite step
			Step 3: This step does not have MultiAssertAttribute so will stop on first exception

	Scenario: Dividing numbers [Ticket-13] - Failed (6ms)
		Step 1: GIVEN a calculator - Passed (<1ms)
		Step 2: THEN dividing "6" by "2" should give "3" - Passed (<1ms)
		Step 3: AND dividing "2" by "0" should give "expected: equals '0', but got: '<DivideByZeroException>'" - Failed (<1ms)
		Step 4: AND dividing "2" by "3" should give "0" - Passed (<1ms)
		Step 5: AND dividing "0" by "5" should give "expected: equals '1', but got: '0'" - Failed (<1ms)
		Details:
			Step 3: System.InvalidOperationException : Parameter 'result' verification failed: expected: equals '0', but got: '<DivideByZeroException>'
				at LightBDD.Core.Execution.Implementation.RunnableStep.VerifyParameterResults() in d:\dev\LightBDD\src\LightBDD.Core\Execution\Implementation\RunnableStep.cs:line 174
				at LightBDD.Core.Execution.Implementation.RunnableStep.RunStepAsync() in d:\dev\LightBDD\src\LightBDD.Core\Execution\Implementation\RunnableStep.cs:line 146
			Step 5: System.InvalidOperationException : Parameter 'result' verification failed: expected: equals '1', but got: '0'
				at LightBDD.Core.Execution.Implementation.RunnableStep.VerifyParameterResults() in d:\dev\LightBDD\src\LightBDD.Core\Execution\Implementation\RunnableStep.cs:line 174
				at LightBDD.Core.Execution.Implementation.RunnableStep.RunStepAsync() in d:\dev\LightBDD\src\LightBDD.Core\Execution\Implementation\RunnableStep.cs:line 146

	Scenario: Multiplying numbers [Ticket-13] - Ignored (6ms)
		Step 1: GIVEN a calculator - Passed (<1ms)
		Step 2: THEN multiplying "6" by "2" should give "12" - Passed (<1ms)
		Step 3: AND multiplying "-1" by "2" should give "expected: equals '-2'" - Ignored (<1ms)
		Step 4: AND multiplying "2" by "0" should give "0" - Passed (<1ms)
		Step 5: AND multiplying "2" by "3" should give "6" - Passed (<1ms)
		Step 6: AND multiplying "2" by "-3" should give "expected: equals '-6'" - Ignored (<1ms)
		Details:
			Step 3: Negative numbers are not supported yet
			Step 6: Negative numbers are not supported yet

Feature: Compact calculator scenarios
	As LightBDD user,
	I want to be able to write compact scenarios,
	So that I can use LightBDD for more unit-test like tests as well

	Scenario: Adding numbers - Passed (22ms)
		Step 1: GIVEN calculator - Passed (2ms)
		Step 2: WHEN I add two numbers - Passed (<1ms)
		Step 3: THEN I should get an expected result - Passed (15ms)

Feature: Contacts management [Story-6]
	In order to maintain my contact book
	As an application user
	I want to add, browse and remove my contacts

	Scenario: Contact book should allow me to add multiple contacts [Ticket-8] - Passed (41ms)
		Step 1: GIVEN my contact book is empty - Passed (1ms)
		Step 2: WHEN I add new contacts - Passed (<1ms)
		Step 3: THEN all contacts should be available in the contact book - Passed (17ms)

	Scenario: Contact book should allow me to remove all contacts [Ticket-9] - Bypassed (5ms)
		Step 1: GIVEN my contact book is filled with many contacts - Passed (1ms)
		Step 2: WHEN I clear it - Bypassed (1ms)
		Step 3: THEN the contact book should be empty - Passed (<1ms)
		Details:
			Step 2: Contact book clearing is not implemented yet. Contacts are removed one by one.

	Scenario: Contact book should allow me to remove contacts [Ticket-9] - Passed (3ms)
		Step 1: GIVEN my contact book is filled with contacts - Passed (<1ms)
		Step 2: WHEN I remove one contact - Passed (<1ms)
		Step 3: THEN the contact book should not contain removed contact any more - Passed (<1ms)
		Step 4: AND the contact book should contains all other contacts - Passed (<1ms)

	Scenario: Displaying contacts alphabetically - Passed (36ms)
		Step 1: GIVEN my contact book is empty - Passed (<1ms)
		Step 2: AND I added contacts "<table>" - Passed (20ms)
		contacts:
		+-----------------+-----+------------+
		|Email            |Name |PhoneNumber |
		+-----------------+-----+------------+
		|john123@gmail.com|John |111-222-333 |
		|greg22@gmail.com |Greg |213-444-444 |
		|emily1@gmail.com |Emily|111-222-5556|
		|ka321@gmail.com  |Kathy|111-555-330 |
		+-----------------+-----+------------+
		Step 3: WHEN I request contacts sorted by name - Passed (<1ms)
		Step 4: THEN I should receive contacts "<table>" - Passed (11ms)
		contacts:
		+-+-----------------+-----+------------+
		|#|Email            |Name |PhoneNumber |
		+-+-----------------+-----+------------+
		|=|emily1@gmail.com |Emily|111-222-5556|
		|=|greg22@gmail.com |Greg |213-444-444 |
		|=|john123@gmail.com|John |111-222-333 |
		|=|ka321@gmail.com  |Kathy|111-555-330 |
		+-+-----------------+-----+------------+

	Scenario: Normalizing contact details - Failed (14ms)
		Step 1: GIVEN I added contacts "<table>" - Passed (<1ms)
		contacts:
		+-------------------+-----+--------------+
		|Email              |Name |PhoneNumber   |
		+-------------------+-----+--------------+
		|john253@mymail.com |John |00441123344555|
		|jenny213@mymail.com|Jenny|112334455     |
		|jerry123@mymail.com|Jerry|1123344556    |
		|jos#@mymail.com    |Josh |12111333444   |
		+-------------------+-----+--------------+
		Step 2: WHEN I request contacts sorted by name - Passed (<1ms)
		Step 3: THEN I should receive contacts "<table>" - Failed (11ms)
		contacts:
		+-+-----+-------------------------------------------------+--------------------------------+
		|#|Name |Email                                            |PhoneNumber                     |
		+-+-----+-------------------------------------------------+--------------------------------+
		|!|Jenny|jenny213@mymail.com                              |112334455/matches '[0-9]{10,14}'|
		|=|Jerry|jerry123@mymail.com                              |1123344556                      |
		|=|John |john253@mymail.com                               |00441123344555                  |
		|!|Josh |jos#@mymail.com/matches '[a-z0-9.-]+@[a-z0-9.-]+'|12111333444                     |
		+-+-----+-------------------------------------------------+--------------------------------+
		Details:
			Step 3: System.InvalidOperationException : Parameter 'contacts' verification failed: [0].PhoneNumber: expected: matches '[0-9]{10,14}', but got: '112334455'
					[3].Email: expected: matches '[a-z0-9.-]+@[a-z0-9.-]+', but got: 'jos#@mymail.com'
				at LightBDD.Core.Execution.Implementation.RunnableStep.VerifyParameterResults() in d:\dev\LightBDD\src\LightBDD.Core\Execution\Implementation\RunnableStep.cs:line 174
				at LightBDD.Core.Execution.Implementation.RunnableStep.RunStepAsync() in d:\dev\LightBDD\src\LightBDD.Core\Execution\Implementation\RunnableStep.cs:line 146

	Scenario: Searching for contacts by phone - Failed (13ms)
		Step 1: GIVEN my contact book is empty - Passed (<1ms)
		Step 2: AND I added contacts "<table>" - Passed (<1ms)
		contacts:
		+-----------------+-----+------------+
		|Email            |Name |PhoneNumber |
		+-----------------+-----+------------+
		|john123@gmail.com|John |111-222-333 |
		|jo@hotmail.com   |John |111-303-404 |
		|greg22@gmail.com |Greg |213-444-444 |
		|emily1@gmail.com |Emily|111-222-5556|
		|ka321@gmail.com  |Kathy|111-555-330 |
		+-----------------+-----+------------+
		Step 3: WHEN I search for contacts by phone starting with "111" - Passed (<1ms)
		Step 4: THEN I should receive contacts "<table>" - Failed (9ms)
		contacts:
		+-+-------------+----------------------------------+------------------+
		|#|Name         |Email                             |PhoneNumber       |
		+-+-------------+----------------------------------+------------------+
		|=|Emily        |emily1@gmail.com                  |111-222-5556      |
		|!|John         |john123@gmail.com/john@hotmail.com|111-222-333       |
		|=|John         |jo@hotmail.com                    |111-303-404       |
		|-|<none>/Kathie|<none>/ka321@gmail.com            |<none>/111-555-330|
		|+|Kathy/<none> |ka321@gmail.com/<none>            |111-555-330/<none>|
		+-+-------------+----------------------------------+------------------+
		Details:
			Step 4: System.InvalidOperationException : Parameter 'contacts' verification failed: [1].Email: expected: equals 'john@hotmail.com', but got: 'john123@gmail.com'
					[3].Name: missing value
					[3].Email: missing value
					[3].PhoneNumber: missing value
					[4].Name: unexpected value
					[4].Email: unexpected value
					[4].PhoneNumber: unexpected value
				at LightBDD.Core.Execution.Implementation.RunnableStep.VerifyParameterResults() in d:\dev\LightBDD\src\LightBDD.Core\Execution\Implementation\RunnableStep.cs:line 174
				at LightBDD.Core.Execution.Implementation.RunnableStep.RunStepAsync() in d:\dev\LightBDD\src\LightBDD.Core\Execution\Implementation\RunnableStep.cs:line 146

Feature: Customer journey [Story-7]
	In order to receive a product
	As an application user
	I want to go through entire customer journey

	Scenario: Ordering products [Ticket-12] - Ignored (3s 551ms)
		Step 1: GIVEN customer is logged in - Passed (1s 224ms)
			Step 1.1: GIVEN the user is about to login - Passed (1ms)
			Step 1.2: AND the user entered valid login - Passed (<1ms)
			Step 1.3: AND the user entered valid password - Passed (<1ms)
			Step 1.4: WHEN the user clicks login button - Passed (1s 209ms)
			Step 1.5: THEN the login operation should be successful - Passed (<1ms)
		Step 2: WHEN customer adds products to basket - Bypassed (1s 265ms)
			Step 2.1: GIVEN product "wooden desk" is in stock - Passed (<1ms)
			Step 2.2: WHEN customer adds product "wooden desk" to the basket - Bypassed (1s 262ms)
			Step 2.3: THEN the product addition should be successful - Passed (<1ms)
		Step 3: AND customer pays for products in basket - Passed (1s 045ms)
			Step 3.1: WHEN customer requests to pay - Passed (1s 044ms)
			Step 3.2: THEN payment should be successful - Passed (<1ms)
		Step 4: THEN customer should receive order email - Ignored (8ms)
			Step 4.1: THEN customer should receive invoice - Ignored (4ms)
			Step 4.2: AND customer should receive order confirmation - NotRun
		Details:
			Step 2.2: Until proper api is implemented, product is added directly to the DB.
			Step 4.1: Not implemented yet
		Attachments:
			Step 4.1: invoice-content - ab422ccc-4a74-4cee-a0b0-b0690a4fa4fd.txt

Feature: Invoice feature [Story-2]
	In order to pay for products
	As a customer
	I want to receive invoice for bought items

	Scenario: Receiving invoice for products [Ticket-4] - Ignored (26ms)
		Categories: Sales
		Step 1: GIVEN product "wooden desk" is available in product storage - Passed (2ms)
		Step 2: AND product "wooden shelf" is available in product storage - Passed (<1ms)
		Step 3: WHEN customer buys product "wooden desk" - Passed (<1ms)
		Step 4: AND customer buys product "wooden shelf" - Passed (<1ms)
		Step 5: THEN an invoice should be sent to the customer - Ignored (1ms)
		Step 6: AND the invoice should contain product "wooden desk" with price of "£62.00" - NotRun
		Step 7: AND the invoice should contain product "wooden shelf" with price of "£37.00" - NotRun
		Details:
			Step 5: Not implemented yet

Feature: Invoice history feature [STORY-9]
	In order to see all payment details
	As a customer
	I want to browse historical invoices
	
	Example usage of fluent scenarios

	Scenario: Browsing invoices [Ticket-14] - Passed (3s 528ms)
		Step 1: GIVEN invoice "Invoice-1" - Passed (1s 075ms)
		Step 2: AND invoice "Invoice-2" - Passed (1s 107ms)
		Step 3: WHEN I request all historical invoices - Passed (1s 329ms)
		Step 4: THEN I should see invoices "Invoice-1, Invoice-2" - Passed (<1ms)

Feature: Login feature [Story-1]
	In order to access personal data
	As an user
	I want to login into system

	Scenario: Anonymous login name should allow to log in [Ticket-3] - Failed (1s 574ms)
		Categories: Security
		Step 1: GIVEN the user is about to login - Passed (9ms)
		Step 2: AND the user entered anonymous login - Passed (<1ms)
		Step 3: WHEN the user clicks login button - Passed (1s 540ms)
		Step 4: THEN the login operation should be successful - Failed (9ms)
		Step 5: AND a welcome message containing user name should be returned - NotRun
		Details:
			Step 4: NUnit.Framework.AssertionException :   Login should succeeded
				  Expected: True
				  But was:  False
				
				at Example.LightBDD.NUnit3.Features.Login_feature.Then_the_login_operation_should_be_successful() in d:\dev\LightBDD\examples\Example.LightBDD.NUnit3\Features\Login_feature.Steps.cs:line 57
				at LightBDD.Framework.Scenarios.Implementation.BasicStepCompiler.StepExecutor.Execute(Object context, Object[] args) in d:\dev\LightBDD\src\LightBDD.Framework\Scenarios\Implementation\BasicStepCompiler.cs:line 102
		Comments:
			Step 2: Presentation of failed scenario

	Scenario: Successful login [Ticket-1] - Passed (1s 015ms)
		Categories: Security
		Step 1: GIVEN the user is about to login - Passed (<1ms)
		Step 2: AND the user entered valid login - Passed (<1ms)
		Step 3: AND the user entered valid password - Passed (<1ms)
		Step 4: WHEN the user clicks login button - Passed (1s 014ms)
		Step 5: THEN the login operation should be successful - Passed (<1ms)
		Step 6: AND a welcome message containing user name should be returned - Passed (<1ms)

	Scenario: Wrong login provided causes login to fail [Ticket-2] - Passed (1s 329ms)
		Categories: Security
		Step 1: GIVEN the user is about to login - Passed (<1ms)
		Step 2: AND the user entered invalid login - Passed (<1ms)
		Step 3: AND the user entered valid password - Passed (<1ms)
		Step 4: WHEN the user clicks login button - Passed (1s 328ms)
		Step 5: THEN the login operation should be unsuccessful - Passed (<1ms)
		Step 6: AND an invalid login or password error message should be returned - Passed (<1ms)

	Scenario: Wrong password provided causes login to fail [Ticket-2] - Passed (1s 022ms)
		Categories: Security
		Step 1: GIVEN the user is about to login - Passed (<1ms)
		Step 2: AND the user entered valid login - Passed (<1ms)
		Step 3: AND the user entered invalid password - Passed (<1ms)
		Step 4: WHEN the user clicks login button - Passed (1s 022ms)
		Step 5: THEN the login operation should be unsuccessful - Passed (<1ms)
		Step 6: AND an invalid login or password error message should be returned - Passed (<1ms)

Feature: Payment feature [Story-5]
	In order to get desired products
	As a customer
	I want to pay for products in basket

	Scenario: Successful payment [Ticket-10][Ticket-11] - Passed (5s 713ms)
		Step 1: GIVEN customer has some products in basket - Passed (1s 237ms)
		Step 2: AND customer has enough money to pay for products - Passed (1s 217ms)
		Step 3: WHEN customer requests to pay - Passed (1s 300ms)
		Step 4: THEN payment should be successful - Passed (1s 947ms)

Feature: Product spedition feature [Story-3]
	In order to deliver products to customer effectively
	As a spedition manager
	I want to dispatch products to customer as soon as the payment is finalized

	Scenario: Should dispatch product after payment is finalized [Ticket-5] - Passed (24ms)
		Categories: Delivery, Sales
		Step 1: GIVEN There is an active customer with id "ABC-123" - Passed (4ms)
		Step 2: AND The customer has product "wooden shelf" in basket - Passed (<1ms)
		Step 3: AND The customer has product "wooden desk" in basket - Passed (<1ms)
		Step 4: WHEN The customer payment finalizes - Passed (<1ms)
		Step 5: THEN Product "wooden shelf" should be dispatched to the customer - Passed (<1ms)
		Step 6: AND Product "wooden desk" should be dispatched to the customer - Passed (<1ms)

Feature: Record persistence feature

	Scenario: Saving data - Failed (2s 075ms)
		Step 1: GIVEN no saved records - Passed (4ms)
		Step 2: WHEN I save records "<tree>" - Passed (2s 046ms)
		records:
		  $: <array:2>
		  $[0]: Record 1
		  $[1]: Record 2
		Step 3: THEN the saved records should match expectation "<tree>" - Failed (5ms)
		expectation:
		= $: <array:2>
		= $[0]: <object>
		= $[0].Id: e83591c1-fa15-4373-a954-a63740ec2a47
		= $[0].ModifiedDate: 01/07/2023 17:55:47 +00:00
		! $[0].Name: like 'Recr*'/Record 1
		= $[1]: <object>
		! $[1].Id: equals '00000000-0000-0000-0000-000000000000'/97cf494e-c154-45d8-bc3f-d3c7bf4edd91
		! $[1].ModifiedDate: less than '01/07/2023 17:55:47 +00:00'/01/07/2023 17:55:48 +00:00
		= $[1].Name: Record 2
		Details:
			Step 3: System.InvalidOperationException : Parameter 'expectation' verification failed: $[0].Name: expected: like 'Recr*', but got: 'Record 1'
					$[1].Id: expected: equals '00000000-0000-0000-0000-000000000000', but got: '97cf494e-c154-45d8-bc3f-d3c7bf4edd91'
					$[1].ModifiedDate: expected: less than '01/07/2023 17:55:47 +00:00', but got: '01/07/2023 17:55:48 +00:00'
				at LightBDD.Core.Execution.Implementation.RunnableStep.VerifyParameterResults() in d:\dev\LightBDD\src\LightBDD.Core\Execution\Implementation\RunnableStep.cs:line 174
				at LightBDD.Core.Execution.Implementation.RunnableStep.RunStepAsync() in d:\dev\LightBDD\src\LightBDD.Core\Execution\Implementation\RunnableStep.cs:line 146
